def down(x, xmin, xmax):
    return (xmax- x) / (xmax - xmin)

def up(x, xmin, xmax):
    return (x - xmin) / (xmax - xmin)

#DATA KEANGGOTAAN PENJUALAN
class KPenjualan():
    minimum = 1000
    maximum = 2000

    def sedikit(self, x):
        if x >= self.maximum:
            return 0
        elif x <= self.minimum:
            return 1
        else:
            return down(x, self.minimum, self.maximum)

    def banyak(self, x):
        if x >= self.maximum:
            return 1
        elif x <= self.minimum:
            return 0
        else:
            return up(x, self.minimum, self.maximum)

#DATA KEANGGOTAAN KEUNTUNGAN
class KKeuntungan():
    minimum = 500000
    maximum = 1000000

    def turun(self, x):
        if x >= self.maximum:
            return 0
        elif x <= self.minimum:
            return 1
        else:
            return down(x, self.minimum, self.maximum)

    def naik(self, x):
        if x >= self.maximum:
            return 1
        elif x <= self.minimum:
            return 0
        else:
            return up(x, self.minimum, self.maximum)

#DATA KEANGGOTAAN PEMBELIAN
class KPembeli():
    minimum = 100
    maximum = 1000
    
    def berkurang(self, α):
        return self.maximum - α * (self.maximum-self.minimum)

    def bertambah(self, α):
        return α *(self.maximum - self.minimum) + self.minimum

    # 2 Penjualan 2 Keuntungan
    def inferensi(self, jumlah_Kpenjualan, jumlah_Kkeuntungan):
        Kpnj = KPenjualan()
        Kknt = Kkeuntungan()
        result = []
        # [R1] JIKA Penjualan SEDIKIT, dan Keuntungan BANYAK, 
        #     MAKA Pembeli Barang BERKURANG.
        α1 = min(Kpnj.turun(jumlah_Kpenjualan), Kknt.banyak(jumlah_Kkeuntungan))
        z1 = self.berkurang(α1)
        result.append((α1, z1))
        # [R2] JIKA Penjualan TURUN, dan Keuntungan SEDIKIT, 
        #     MAKA Pembeli Barang BERKURANG.
        α2 = min(pmt.turun(jumlah_Kpenjualan), psd.sedikit(jumlah_Kkeuntungan))
        z2 = self.berkurang(α2)
        result.append((α2, z2))
        # [R3] JIKA Penjualan NAIK, dan Keuntungan BANYAK, 
        #     MAKA Pembeli Barang BERTAMBAH.
        α3 = min(pmt.naik(jumlah_Kpenjualan), psd.banyak(jumlah_Kkeuntungan))
        z3 = self.bertambah(α3)
        result.append((α3, z3))
        # [R4] JIKA Penjualan NAIK, dan Keuntungan SEDIKIT,
        #     MAKA Pembeli Barang BERTAMBAH.
        α4 = min(pmt.naik(jumlah_Kpenjualan), psd.sedikit(jumlah_Kkeuntungan))
        z4 = self.bertambah(α4)
        result.append((α4, z4))
        return result
    
    def defuzifikasi(self, jumlah_Kpenjualan, jumlah_Kkeuntungan):
        inferensi_values = self.inferensi(jumlah_Kpenjualan, jumlah_Kkeuntungan)
        return sum([(value[0]* value[1]) for value in inferensi_values]) / sum([value[0] for value in inferensi_values])
